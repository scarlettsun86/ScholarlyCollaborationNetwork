# -*- coding: utf-8 -*-
"""gephi画图表.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T1tOgxYKEcJHI5UVERLlGVqNq77Hn01_
"""

import pandas as pd
import numpy as np
from pandas import Series , DataFrame

from google.colab import files
uploaded = files.upload()

import io
df2016raw = pd.read_csv(io.BytesIO(uploaded['2016.csv']))

#split the author
author = []
for i in df2016raw['Author Full Names']:
    b = i.split('; ')
    author.append(b)
columns = ['Author1','Author2','Author3','Author4','Author5','Author6','Author7','Author8','Author9','Author10','Author11']
df1 = DataFrame(author,columns = columns)
df1

#[node list,edge list]
def get_nodes_edges(co_list):
    ''' Used to generate node list and edge list at one time.
        co_list: Previously split list of author names
        output: [node list,edge list]
    '''
    nodes_list = []
    edge_list = []
    for authors in co_list:
        # node
        for auth in authors:
            if auth not in nodes_list:
                nodes_list.append(auth)
        # edge
        length = len(authors)
        for i in range(length-1):
            for j in range(i+1,length):
                    edge_list.append([authors[i],authors[j]])
    return nodes_list,edge_list

nodes_list,edge_list = get_nodes_edges(author)

from copy import deepcopy
def get_weighted_links(edge_list):
    ''' edges_list：Is the matrix that contains the list of edges,[[Node1,Node2],...],
        Edges can be repeated and the number of repetitions is denoted as weights
        return：A list of edges with weights,[[Node1,Node2,weight],...]
    '''
    weighted_links = []
    exist_links = []
    #Iterate over the list of edges to calculate weights
    for link in edge_list:
        if link not in exist_links:
            exist_links.append(link)
            _link = deepcopy(link)
            _link.append(1)  
            weighted_links.append(_link)        
        else:
            index = exist_links.index(link) 
            weighted_links[index][2] = weighted_links[index][2] + 1 
    return weighted_links

weighted_links = get_weighted_links(edge_list)

columns = ['source','target','weight']
df_edge = DataFrame(weighted_links,columns = columns)
df_edge

df_edge.to_csv('weight_links.csv',index = False)

!pip install igraph
import igraph as ig
from igraph import *

g = Graph()

g.add_vertices(nodes_list)
g.add_edges(edge_list)

df = DataFrame(nodes_list,columns = ['Author'])
df['Degree'] = g.degree()
df['Betweeness'] = g.betweenness()
df['Closeness'] = g.closeness()

df.sort_values(by = ['Degree'],axis = 0,ascending = False).head(6)

df.sort_values(by = ['Betweeness'],axis = 0,ascending = False).head(6)

df.sort_values(by = ['Closeness'],axis = 0,ascending = False).head(6)

"""add csv"""

#2017
uploaded = files.upload()
df2017raw = pd.read_csv(io.BytesIO(uploaded['2017.csv']))
author2017 = []
for i in df2017raw['Author Full Names']:
  b = i.split('; ')
  author2017.append(b)
columns = ['Author1','Author2','Author3','Author4','Author5','Author6','Author7','Author8']
df2017 = DataFrame(author2017,columns = columns)
nodes_list,edge_list = get_nodes_edges(author2017)
weighted_links = get_weighted_links(edge_list)
columns = ['source','target','weight']
df_edge = DataFrame(weighted_links,columns = columns)
df_edge.to_csv('2017_gephi.csv',index = False)

#2018
uploaded = files.upload()
df2018raw = pd.read_csv(io.BytesIO(uploaded['2018.csv']))
author2018 = []
for i in df2018raw['Author Full Names']:
  b = i.split('; ')
  author2018.append(b)
columns = ['Author1','Author2','Author3','Author4','Author5','Author6','Author7','Author8','Author9','Author10']
df2018 = DataFrame(author2018,columns = columns)
nodes_list,edge_list = get_nodes_edges(author2018)
weighted_links = get_weighted_links(edge_list)
columns = ['source','target','weight']
df_edge = DataFrame(weighted_links,columns = columns)
df_edge.to_csv('2018_gephi.csv',index = False)

#2019
uploaded = files.upload()
df2019raw = pd.read_csv(io.BytesIO(uploaded['2019.csv']))
author2019 = []
for i in df2019raw['Author Full Names']:
  b = i.split('; ')
  author2019.append(b)
columns = ['Author1','Author2','Author3','Author4','Author5','Author6','Author7','Author8','Author9','Author10','Author11','Author12','Author13','Author14','Author15','Author16']
df2019 = DataFrame(author2019,columns = columns)
nodes_list,edge_list = get_nodes_edges(author2019)
weighted_links = get_weighted_links(edge_list)
columns = ['source','target','weight']
df_edge = DataFrame(weighted_links,columns = columns)
df_edge.to_csv('2019_gephi.csv',index = False)

#2020
uploaded = files.upload()
df2020raw = pd.read_csv(io.BytesIO(uploaded['2020.csv']))
author2020 = []
for i in df2020raw['Author Full Names']:
  b = i.split('; ')
  author2020.append(b)
columns = ['Author1','Author2','Author3','Author4','Author5','Author6','Author7','Author8','Author9','Author10']
df2020 = DataFrame(author2020,columns = columns)
nodes_list,edge_list = get_nodes_edges(author2020)
weighted_links = get_weighted_links(edge_list)
columns = ['source','target','weight']
df_edge = DataFrame(weighted_links,columns = columns)
df_edge.to_csv('2020_gephi.csv',index = False)

#2021
uploaded = files.upload()
df2021raw = pd.read_csv(io.BytesIO(uploaded['2021.csv']))
author2021 = []
for i in df2021raw['Author Full Names']:
  b = i.split('; ')
  author2021.append(b)
columns2021 = ['Author1','Author2','Author3','Author4','Author5','Author6','Author7','Author8','Author9','Author10','Author11','Author12','Author13','Author14']
df2021 = DataFrame(author2021,columns = columns2021)
nodes_list2021,edge_list2021 = get_nodes_edges(author2021)
weighted_links2021 = get_weighted_links(edge_list2021)
columns = ['source','target','weight']
df_edge2021 = DataFrame(weighted_links,columns = columns)
df_edge2021.to_csv('2021_gephi.csv',index = False)

#all
uploaded = files.upload()
dfALLraw = pd.read_csv(io.BytesIO(uploaded['all.csv']))
authorALL = []
for i in dfALLraw['Author Full Names']:
  i=str(i)
  b = i.split('; ')
  authorALL.append(b)
columnsALL = ['Author1','Author2','Author3','Author4','Author5','Author6','Author7','Author8','Author9','Author10','Author11','Author12','Author13','Author14''Author15','Author16']
dfALL = DataFrame(authorALL,columns = columnsALL)
nodes_listALL,edge_listALL = get_nodes_edges(authorALL)
weighted_linksALL = get_weighted_links(edge_listALL)
columns = ['source','target','weight']
df_edgeALL = DataFrame(weighted_links,columns = columns)
df_edgeALL.to_csv('ALL_gephi.csv',index = False)